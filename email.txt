import nodemailer from 'nodemailer';
import { Request, Response } from 'express';

export const email_confirm_post = async (req: Request, res: Response) => {
  if (req.body.email_confirm) {
    let { email_confirm } = req.body;
    let hasCode = await User.findOne({ where: { code: email_confirm } });

    if (hasCode?.code.toString() === req.body.email_confirm) {
      // Código correto, enviar e-mail para a pessoa
      const transporter = nodemailer.createTransport({
        host: 'smtp.gmail.com',
        port: 465,
        secure: true,
        auth: {
          user: 'seu-email@gmail.com', // Seu endereço de e-mail do Gmail
          pass: 'sua-senha', // Sua senha do Gmail
        },
      });

      const mailOptions = {
        from: 'seu-email@gmail.com', // Seu endereço de e-mail do Gmail
        to: 'email-da-pessoa@exemplo.com', // E-mail da pessoa para quem você deseja enviar
        subject: 'Confirmação de E-mail',
        text: `Seu código de confirmação é: ${hasCode?.code}`,
      };

      transporter.sendMail(mailOptions, (error, info) => {
        if (error) {
          console.error(error);
          res.render('pages/confirmAccount', {
            message: 'Erro ao enviar e-mail',
          });
        } else {
          // Atualizar o status da validação e redirecionar para uma página de sucesso
          await User.update({ validated: 1 }, {
            where: {
              code: hasCode?.code,
            },
          });
          res.redirect('/message_create_email');
        }
      });
    } else {
      res.render('pages/confirmAccount', {
        message: 'Código Incorreto*',
      });
    }
    return;
  }
  res.render('pages/confirmAccount', {
    message: 'Código não enviado*',
  });
};




import express from 'express';
import jwt from 'jsonwebtoken';

const router = express.Router();

router.post('/logout', (req, res) => {
  // Verifique se o token JWT está presente no cabeçalho da solicitação
  const token = req.headers.authorization?.split(' ')[1];
  
  if (token) {
    // Verifique se o token é válido
    jwt.verify(token, 'chave-secreta-do-jwt', (err) => {
      if (err) {
        // Se houver erro na verificação, envie uma resposta de erro
        return res.status(401).json({ message: 'Token inválido' });
      } else {
        // Se o token for válido, faça o logout do usuário
        // ... lógica de logout ...
        return res.status(200).json({ message: 'Logout realizado com sucesso' });
      }
    });
  } else {
    // Se o token não estiver presente, envie uma resposta de erro
    return res.status(401).json({ message: 'Token não fornecido' });
  }
});

export default router;





<!-- Exemplo de um formulário Mustache -->
<form method="POST" action="/logout">
  <button type="submit">Logout</button>
</form>


import express from 'express';
import jwt from 'jsonwebtoken';

const router = express.Router();

router.post('/logout', (req, res) => {
  // Verifique se o token JWT está presente na query da solicitação
  const token = req.query.token as string;
  
  if (token) {
    // Remova o token da forma adequada de acordo com a sua implementação
    // Exemplo de remoção do token em um cookie:
    res.clearCookie('token');
    
    // Envie uma resposta de sucesso
    return res.status(200).json({ message: 'Logout realizado com sucesso' });
  } else {
    // Se o token não estiver presente, envie uma resposta de erro
    return res.status(401).json({ message: 'Token não fornecido' });
  }
});

export default router;




